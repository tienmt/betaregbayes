# Step 3: Update local lambda2 and auxiliary nu
for (j in 1:p) {
lambda2[j] <- 1 / rgamma(1, shape = 1, rate = 1 / nu[j] + beta[j]^2 / (2 * tau2))
nu[j] <- 1 / rgamma(1, shape = 1, rate = 1 + 1 / lambda2[j])
}
# Step 4: Update global tau2 and auxiliary xi
tau2 <- 1 / rgamma(1, shape = (p + 1) / 2, rate = 1 / xi + sum(beta^2 / lambda2) / 2)
xi <- 1 / rgamma(1, shape = 1, rate = 1 + 1 / tau2)
# Store sample
beta_samples[iter, ] <- beta
}
return(beta_samples)
}
gibbs_sampler_betreg_HS <- compiler::cmpfun(gibbs_sampler_betreg_HS)
for (ss in 25:100) {
xxx <- matrix(rnorm((n+n_test) *p ), ncol = p )
eta <- xxx %*% beta_true
mu <- 1 / (1 + exp(-eta)) ; phi <- 10
yyy <- rbeta(n+n_test, mu * phi, (1 - mu) * phi)
yyy = pmin(pmax(yyy, epsilon), 1 - epsilon)
X = xxx[1:n,]
y = yyy[1:n]
y_test = yyy[-(1:n)]
X_test = xxx[-(1:n),]
# Logit-transform y (avoid 0/1)
y_logit <- log((y + epsilon) / (1 - y + epsilon))
fit <- cv.glmnet(X, y_logit, alpha = 1,intercept= FALSE)  # Lasso
lasso <- as.vector( coef(fit, s = "lambda.min"))[-1]
y_pred <- 1 / (1 + exp(-predict(fit,newx = X))) ; y_tes_hat <-  1 / (1 + exp(-predict(fit,newx = X_test)))
lassoout[[ss]] = c(mean( (beta_true - lasso)^2 ), mean( (X %*%beta_true - X %*%lasso)^2 ), mean( (y_pred - y)^2 ), mean( (y_tes_hat - y_test)^2 ) )
# --- Posterior Summaries ---
beta_samples <- gibbs_sampler_betreg_HS(y,X,phi = 10,n_iter = 1200)
posterior <- beta_samples[(200 + 1):1200, ]
posterior_means <- colMeans(posterior)
mu_HS <- 1 / (1 + exp(-X %*% posterior_means)); mu_HS_test <- 1 / (1 + exp(-X_test %*% posterior_means))
hs_out[[ss]] = c(mean( (beta_true - posterior_means)^2 ), mean( (X %*%beta_true - X %*%posterior_means)^2 ), mean( (mu_HS - y)^2 ), mean( (mu_HS_test - y_test)^2 ) )
df <- data.frame(y, X)
# Fit the Beta regression model
library(betareg)
fit_betareg <- betareg(y ~ 0+ X, data = df)
bereg <- fit_betareg$coefficients$mean  ; pred_betreg <- predict(fit_betareg); pred_breg_test <- 1/(1 + exp(-X_test %*% bereg))
bereg_out[[ss]] = c(mean( (beta_true - bereg)^2 ), mean( (X %*%beta_true - X %*%bereg)^2 ), mean( (pred_betreg - y)^2 ), mean( (pred_breg_test - y_test)^2 ) )
print(ss)
}
save.image(file = 'beta_n100p20s10_.rda')
library(BayesLogit);library(Rcpp);sourceCpp('test.cpp')   # For Polya-Gamma sampling
library(glmnet)
source('Gibbs_betreg_hs.R')
library(tictoc)
# --- Simulated Data ---
n <- 100
n_test <- 30
p <- 20   # Many predictors, true sparsity
s0 = 10
beta_true <- rep(0, p) ; beta_true[1:s0] <- c( rep(1, s0/2) , rep(-1, s0/2) )
epsilon <- 1e-6
lassoout = hs_out = bereg_out = list()
rho <- 0.5
Sigma <- outer(1:p, 1:p, function(i, j)rho^abs(i - j))
LL = chol(Sigma)
for (ss in 1:100) {
xxx <- matrix(rnorm((n+n_test) *p ), ncol = p )%*% LL
eta <- xxx %*% beta_true
mu <- 1 / (1 + exp(-eta)) ; phi <- 10
yyy <- rbeta(n+n_test, mu * phi, (1 - mu) * phi)
yyy = pmin(pmax(yyy, epsilon), 1 - epsilon)
X = xxx[1:n,]
y = yyy[1:n]
y_test = yyy[-(1:n)]
X_test = xxx[-(1:n),]
# Logit-transform y (avoid 0/1)
y_logit <- log((y + epsilon) / (1 - y + epsilon))
fit <- cv.glmnet(X, y_logit, alpha = 1,intercept= FALSE)  # Lasso
lasso <- as.vector( coef(fit, s = "lambda.min"))[-1]
y_pred <- 1 / (1 + exp(-predict(fit,newx = X))) ; y_tes_hat <-  1 / (1 + exp(-predict(fit,newx = X_test)))
lassoout[[ss]] = c(mean( (beta_true - lasso)^2 ), mean( (X %*%beta_true - X %*%lasso)^2 ), mean( (y_pred - y)^2 ), mean( (y_tes_hat - y_test)^2 ) )
# --- Posterior Summaries ---
beta_samples <- gibbs_sampler_betreg_HS(y,X,phi = 10,n_iter = 1200)
posterior <- beta_samples[(200 + 1):1200, ]
posterior_means <- colMeans(posterior)
mu_HS <- 1 / (1 + exp(-X %*% posterior_means)); mu_HS_test <- 1 / (1 + exp(-X_test %*% posterior_means))
hs_out[[ss]] = c(mean( (beta_true - posterior_means)^2 ), mean( (X %*%beta_true - X %*%posterior_means)^2 ), mean( (mu_HS - y)^2 ), mean( (mu_HS_test - y_test)^2 ) )
df <- data.frame(y, X)
# Fit the Beta regression model
library(betareg)
fit_betareg <- betareg(y ~ 0+ X, data = df)
bereg <- fit_betareg$coefficients$mean  ; pred_betreg <- predict(fit_betareg); pred_breg_test <- 1/(1 + exp(-X_test %*% bereg))
bereg_out[[ss]] = c(mean( (beta_true - bereg)^2 ), mean( (X %*%beta_true - X %*%bereg)^2 ), mean( (pred_betreg - y)^2 ), mean( (pred_breg_test - y_test)^2 ) )
print(ss)
}
for (ss in 30:100) {
xxx <- matrix(rnorm((n+n_test) *p ), ncol = p )%*% LL
eta <- xxx %*% beta_true
mu <- 1 / (1 + exp(-eta)) ; phi <- 10
yyy <- rbeta(n+n_test, mu * phi, (1 - mu) * phi)
yyy = pmin(pmax(yyy, epsilon), 1 - epsilon)
X = xxx[1:n,]
y = yyy[1:n]
y_test = yyy[-(1:n)]
X_test = xxx[-(1:n),]
# Logit-transform y (avoid 0/1)
y_logit <- log((y + epsilon) / (1 - y + epsilon))
fit <- cv.glmnet(X, y_logit, alpha = 1,intercept= FALSE)  # Lasso
lasso <- as.vector( coef(fit, s = "lambda.min"))[-1]
y_pred <- 1 / (1 + exp(-predict(fit,newx = X))) ; y_tes_hat <-  1 / (1 + exp(-predict(fit,newx = X_test)))
lassoout[[ss]] = c(mean( (beta_true - lasso)^2 ), mean( (X %*%beta_true - X %*%lasso)^2 ), mean( (y_pred - y)^2 ), mean( (y_tes_hat - y_test)^2 ) )
# --- Posterior Summaries ---
beta_samples <- gibbs_sampler_betreg_HS(y,X,phi = 10,n_iter = 1200)
posterior <- beta_samples[(200 + 1):1200, ]
posterior_means <- colMeans(posterior)
mu_HS <- 1 / (1 + exp(-X %*% posterior_means)); mu_HS_test <- 1 / (1 + exp(-X_test %*% posterior_means))
hs_out[[ss]] = c(mean( (beta_true - posterior_means)^2 ), mean( (X %*%beta_true - X %*%posterior_means)^2 ), mean( (mu_HS - y)^2 ), mean( (mu_HS_test - y_test)^2 ) )
df <- data.frame(y, X)
# Fit the Beta regression model
library(betareg)
fit_betareg <- betareg(y ~ 0+ X, data = df)
bereg <- fit_betareg$coefficients$mean  ; pred_betreg <- predict(fit_betareg); pred_breg_test <- 1/(1 + exp(-X_test %*% bereg))
bereg_out[[ss]] = c(mean( (beta_true - bereg)^2 ), mean( (X %*%beta_true - X %*%bereg)^2 ), mean( (pred_betreg - y)^2 ), mean( (pred_breg_test - y_test)^2 ) )
print(ss)
}
for (ss in 62:100) {
xxx <- matrix(rnorm((n+n_test) *p ), ncol = p )%*% LL
eta <- xxx %*% beta_true
mu <- 1 / (1 + exp(-eta)) ; phi <- 10
yyy <- rbeta(n+n_test, mu * phi, (1 - mu) * phi)
yyy = pmin(pmax(yyy, epsilon), 1 - epsilon)
X = xxx[1:n,]
y = yyy[1:n]
y_test = yyy[-(1:n)]
X_test = xxx[-(1:n),]
# Logit-transform y (avoid 0/1)
y_logit <- log((y + epsilon) / (1 - y + epsilon))
fit <- cv.glmnet(X, y_logit, alpha = 1,intercept= FALSE)  # Lasso
lasso <- as.vector( coef(fit, s = "lambda.min"))[-1]
y_pred <- 1 / (1 + exp(-predict(fit,newx = X))) ; y_tes_hat <-  1 / (1 + exp(-predict(fit,newx = X_test)))
lassoout[[ss]] = c(mean( (beta_true - lasso)^2 ), mean( (X %*%beta_true - X %*%lasso)^2 ), mean( (y_pred - y)^2 ), mean( (y_tes_hat - y_test)^2 ) )
# --- Posterior Summaries ---
beta_samples <- gibbs_sampler_betreg_HS(y,X,phi = 10,n_iter = 1200)
posterior <- beta_samples[(200 + 1):1200, ]
posterior_means <- colMeans(posterior)
mu_HS <- 1 / (1 + exp(-X %*% posterior_means)); mu_HS_test <- 1 / (1 + exp(-X_test %*% posterior_means))
hs_out[[ss]] = c(mean( (beta_true - posterior_means)^2 ), mean( (X %*%beta_true - X %*%posterior_means)^2 ), mean( (mu_HS - y)^2 ), mean( (mu_HS_test - y_test)^2 ) )
df <- data.frame(y, X)
# Fit the Beta regression model
library(betareg)
fit_betareg <- betareg(y ~ 0+ X, data = df)
bereg <- fit_betareg$coefficients$mean  ; pred_betreg <- predict(fit_betareg); pred_breg_test <- 1/(1 + exp(-X_test %*% bereg))
bereg_out[[ss]] = c(mean( (beta_true - bereg)^2 ), mean( (X %*%beta_true - X %*%bereg)^2 ), mean( (pred_betreg - y)^2 ), mean( (pred_breg_test - y_test)^2 ) )
print(ss)
}
save.image(file = 'beta_n100p20s10_rX_.rda')
library(BayesLogit);library(Rcpp);sourceCpp('test.cpp')   # For Polya-Gamma sampling
library(glmnet)
source('Gibbs_betreg_hs.R')
library(tictoc)
# --- Simulated Data ---
n <- 500
n_test <- 30
p <- 20   # Many predictors, true sparsity
s0 = 10
beta_true <- rep(0, p) ; beta_true[1:s0] <- c( rep(1, s0/2) , rep(-1, s0/2) )
epsilon <- 1e-6
lassoout = hs_out = bereg_out = list()
rho <- 0.5
Sigma <- outer(1:p, 1:p, function(i, j)rho^abs(i - j))
LL = chol(Sigma)
for (ss in 1:100) {
xxx <- matrix(rnorm((n+n_test) *p ), ncol = p )%*% LL
eta <- xxx %*% beta_true
mu <- 1 / (1 + exp(-eta)) ; phi <- 10
yyy <- rbeta(n+n_test, mu * phi, (1 - mu) * phi)
yyy = pmin(pmax(yyy, epsilon), 1 - epsilon)
X = xxx[1:n,]
y = yyy[1:n]
y_test = yyy[-(1:n)]
X_test = xxx[-(1:n),]
# Logit-transform y (avoid 0/1)
y_logit <- log((y + epsilon) / (1 - y + epsilon))
fit <- cv.glmnet(X, y_logit, alpha = 1,intercept= FALSE)  # Lasso
lasso <- as.vector( coef(fit, s = "lambda.min"))[-1]
y_pred <- 1 / (1 + exp(-predict(fit,newx = X))) ; y_tes_hat <-  1 / (1 + exp(-predict(fit,newx = X_test)))
lassoout[[ss]] = c(mean( (beta_true - lasso)^2 ), mean( (X %*%beta_true - X %*%lasso)^2 ), mean( (y_pred - y)^2 ), mean( (y_tes_hat - y_test)^2 ) )
# --- Posterior Summaries ---
beta_samples <- gibbs_sampler_betreg_HS(y,X,phi = 10,n_iter = 1200)
posterior <- beta_samples[(200 + 1):1200, ]
posterior_means <- colMeans(posterior)
mu_HS <- 1 / (1 + exp(-X %*% posterior_means)); mu_HS_test <- 1 / (1 + exp(-X_test %*% posterior_means))
hs_out[[ss]] = c(mean( (beta_true - posterior_means)^2 ), mean( (X %*%beta_true - X %*%posterior_means)^2 ), mean( (mu_HS - y)^2 ), mean( (mu_HS_test - y_test)^2 ) )
df <- data.frame(y, X)
# Fit the Beta regression model
library(betareg)
fit_betareg <- betareg(y ~ 0+ X, data = df)
bereg <- fit_betareg$coefficients$mean  ; pred_betreg <- predict(fit_betareg); pred_breg_test <- 1/(1 + exp(-X_test %*% bereg))
bereg_out[[ss]] = c(mean( (beta_true - bereg)^2 ), mean( (X %*%beta_true - X %*%bereg)^2 ), mean( (pred_betreg - y)^2 ), mean( (pred_breg_test - y_test)^2 ) )
print(ss)
}
library(BayesLogit);library(Rcpp);sourceCpp('test.cpp')   # For Polya-Gamma sampling
library(glmnet)
source('Gibbs_betreg_hs.R')
library(tictoc)
# --- Simulated Data ---
n <- 500
n_test <- 30
p <- 20   # Many predictors, true sparsity
s0 = 10
beta_true <- rep(0, p) ; beta_true[1:s0] <- c( rep(1, s0/2) , rep(-1, s0/2) )
epsilon <- 1e-6
lassoout = hs_out = bereg_out = list()
rho <- 0.5
Sigma <- outer(1:p, 1:p, function(i, j)rho^abs(i - j))
LL = chol(Sigma)
for (ss in 1:100) {
xxx <- matrix(rnorm((n+n_test) *p ), ncol = p )%*% LL
eta <- xxx %*% beta_true
mu <- 1 / (1 + exp(-eta)) ; phi <- 10
yyy <- rbeta(n+n_test, mu * phi, (1 - mu) * phi)
yyy = pmin(pmax(yyy, epsilon), 1 - epsilon)
X = xxx[1:n,]
y = yyy[1:n]
y_test = yyy[-(1:n)]
X_test = xxx[-(1:n),]
# Logit-transform y (avoid 0/1)
y_logit <- log((y + epsilon) / (1 - y + epsilon))
fit <- cv.glmnet(X, y_logit, alpha = 1,intercept= FALSE)  # Lasso
lasso <- as.vector( coef(fit, s = "lambda.min"))[-1]
y_pred <- 1 / (1 + exp(-predict(fit,newx = X))) ; y_tes_hat <-  1 / (1 + exp(-predict(fit,newx = X_test)))
lassoout[[ss]] = c(mean( (beta_true - lasso)^2 ), mean( (X %*%beta_true - X %*%lasso)^2 ), mean( (y_pred - y)^2 ), mean( (y_tes_hat - y_test)^2 ) )
# --- Posterior Summaries ---
beta_samples <- gibbs_sampler_betreg_HS(y,X,phi = 10,n_iter = 1200)
posterior <- beta_samples[(200 + 1):1200, ]
posterior_means <- colMeans(posterior)
mu_HS <- 1 / (1 + exp(-X %*% posterior_means)); mu_HS_test <- 1 / (1 + exp(-X_test %*% posterior_means))
hs_out[[ss]] = c(mean( (beta_true - posterior_means)^2 ), mean( (X %*%beta_true - X %*%posterior_means)^2 ), mean( (mu_HS - y)^2 ), mean( (mu_HS_test - y_test)^2 ) )
df <- data.frame(y, X)
# Fit the Beta regression model
library(betareg)
fit_betareg <- betareg(y ~ 0+ X, data = df)
bereg <- fit_betareg$coefficients$mean  ; pred_betreg <- predict(fit_betareg); pred_breg_test <- 1/(1 + exp(-X_test %*% bereg))
bereg_out[[ss]] = c(mean( (beta_true - bereg)^2 ), mean( (X %*%beta_true - X %*%bereg)^2 ), mean( (pred_betreg - y)^2 ), mean( (pred_breg_test - y_test)^2 ) )
print(ss)
}
for (ss in 47:100) {
xxx <- matrix(rnorm((n+n_test) *p ), ncol = p )%*% LL
eta <- xxx %*% beta_true
mu <- 1 / (1 + exp(-eta)) ; phi <- 10
yyy <- rbeta(n+n_test, mu * phi, (1 - mu) * phi)
yyy = pmin(pmax(yyy, epsilon), 1 - epsilon)
X = xxx[1:n,]
y = yyy[1:n]
y_test = yyy[-(1:n)]
X_test = xxx[-(1:n),]
# Logit-transform y (avoid 0/1)
y_logit <- log((y + epsilon) / (1 - y + epsilon))
fit <- cv.glmnet(X, y_logit, alpha = 1,intercept= FALSE)  # Lasso
lasso <- as.vector( coef(fit, s = "lambda.min"))[-1]
y_pred <- 1 / (1 + exp(-predict(fit,newx = X))) ; y_tes_hat <-  1 / (1 + exp(-predict(fit,newx = X_test)))
lassoout[[ss]] = c(mean( (beta_true - lasso)^2 ), mean( (X %*%beta_true - X %*%lasso)^2 ), mean( (y_pred - y)^2 ), mean( (y_tes_hat - y_test)^2 ) )
# --- Posterior Summaries ---
beta_samples <- gibbs_sampler_betreg_HS(y,X,phi = 10,n_iter = 1200)
posterior <- beta_samples[(200 + 1):1200, ]
posterior_means <- colMeans(posterior)
mu_HS <- 1 / (1 + exp(-X %*% posterior_means)); mu_HS_test <- 1 / (1 + exp(-X_test %*% posterior_means))
hs_out[[ss]] = c(mean( (beta_true - posterior_means)^2 ), mean( (X %*%beta_true - X %*%posterior_means)^2 ), mean( (mu_HS - y)^2 ), mean( (mu_HS_test - y_test)^2 ) )
df <- data.frame(y, X)
# Fit the Beta regression model
library(betareg)
fit_betareg <- betareg(y ~ 0+ X, data = df)
bereg <- fit_betareg$coefficients$mean  ; pred_betreg <- predict(fit_betareg); pred_breg_test <- 1/(1 + exp(-X_test %*% bereg))
bereg_out[[ss]] = c(mean( (beta_true - bereg)^2 ), mean( (X %*%beta_true - X %*%bereg)^2 ), mean( (pred_betreg - y)^2 ), mean( (pred_breg_test - y_test)^2 ) )
print(ss)
}
for (ss in 49:100) {
xxx <- matrix(rnorm((n+n_test) *p ), ncol = p )%*% LL
eta <- xxx %*% beta_true
mu <- 1 / (1 + exp(-eta)) ; phi <- 10
yyy <- rbeta(n+n_test, mu * phi, (1 - mu) * phi)
yyy = pmin(pmax(yyy, epsilon), 1 - epsilon)
X = xxx[1:n,]
y = yyy[1:n]
y_test = yyy[-(1:n)]
X_test = xxx[-(1:n),]
df <- data.frame(y, X)
# Fit the Beta regression model
library(betareg)
fit_betareg <- betareg(y ~ 0+ X, data = df)
bereg <- fit_betareg$coefficients$mean  ; pred_betreg <- predict(fit_betareg); pred_breg_test <- 1/(1 + exp(-X_test %*% bereg))
bereg_out[[ss]] = c(mean( (beta_true - bereg)^2 ), mean( (X %*%beta_true - X %*%bereg)^2 ), mean( (pred_betreg - y)^2 ), mean( (pred_breg_test - y_test)^2 ) )
# Logit-transform y (avoid 0/1)
y_logit <- log((y + epsilon) / (1 - y + epsilon))
fit <- cv.glmnet(X, y_logit, alpha = 1,intercept= FALSE)  # Lasso
lasso <- as.vector( coef(fit, s = "lambda.min"))[-1]
y_pred <- 1 / (1 + exp(-predict(fit,newx = X))) ; y_tes_hat <-  1 / (1 + exp(-predict(fit,newx = X_test)))
lassoout[[ss]] = c(mean( (beta_true - lasso)^2 ), mean( (X %*%beta_true - X %*%lasso)^2 ), mean( (y_pred - y)^2 ), mean( (y_tes_hat - y_test)^2 ) )
# --- Posterior Summaries ---
beta_samples <- gibbs_sampler_betreg_HS(y,X,phi = 10,n_iter = 1200)
posterior <- beta_samples[(200 + 1):1200, ]
posterior_means <- colMeans(posterior)
mu_HS <- 1 / (1 + exp(-X %*% posterior_means)); mu_HS_test <- 1 / (1 + exp(-X_test %*% posterior_means))
hs_out[[ss]] = c(mean( (beta_true - posterior_means)^2 ), mean( (X %*%beta_true - X %*%posterior_means)^2 ), mean( (mu_HS - y)^2 ), mean( (mu_HS_test - y_test)^2 ) )
print(ss)
}
save.image(file = 'beta_n500p20s10_rX_.rda')
for (ss in 81:100) {
xxx <- matrix(rnorm((n+n_test) *p ), ncol = p )%*% LL
eta <- xxx %*% beta_true
mu <- 1 / (1 + exp(-eta)) ; phi <- 10
yyy <- rbeta(n+n_test, mu * phi, (1 - mu) * phi)
yyy = pmin(pmax(yyy, epsilon), 1 - epsilon)
X = xxx[1:n,]
y = yyy[1:n]
y_test = yyy[-(1:n)]
X_test = xxx[-(1:n),]
df <- data.frame(y, X)
# Fit the Beta regression model
library(betareg)
fit_betareg <- betareg(y ~ 0+ X, data = df)
bereg <- fit_betareg$coefficients$mean  ; pred_betreg <- predict(fit_betareg); pred_breg_test <- 1/(1 + exp(-X_test %*% bereg))
bereg_out[[ss]] = c(mean( (beta_true - bereg)^2 ), mean( (X %*%beta_true - X %*%bereg)^2 ), mean( (pred_betreg - y)^2 ), mean( (pred_breg_test - y_test)^2 ) )
# Logit-transform y (avoid 0/1)
y_logit <- log((y + epsilon) / (1 - y + epsilon))
fit <- cv.glmnet(X, y_logit, alpha = 1,intercept= FALSE)  # Lasso
lasso <- as.vector( coef(fit, s = "lambda.min"))[-1]
y_pred <- 1 / (1 + exp(-predict(fit,newx = X))) ; y_tes_hat <-  1 / (1 + exp(-predict(fit,newx = X_test)))
lassoout[[ss]] = c(mean( (beta_true - lasso)^2 ), mean( (X %*%beta_true - X %*%lasso)^2 ), mean( (y_pred - y)^2 ), mean( (y_tes_hat - y_test)^2 ) )
# --- Posterior Summaries ---
beta_samples <- gibbs_sampler_betreg_HS(y,X,phi = 10,n_iter = 1200)
posterior <- beta_samples[(200 + 1):1200, ]
posterior_means <- colMeans(posterior)
mu_HS <- 1 / (1 + exp(-X %*% posterior_means)); mu_HS_test <- 1 / (1 + exp(-X_test %*% posterior_means))
hs_out[[ss]] = c(mean( (beta_true - posterior_means)^2 ), mean( (X %*%beta_true - X %*%posterior_means)^2 ), mean( (mu_HS - y)^2 ), mean( (mu_HS_test - y_test)^2 ) )
print(ss)
}
for (ss in 95:100) {
xxx <- matrix(rnorm((n+n_test) *p ), ncol = p )%*% LL
eta <- xxx %*% beta_true
mu <- 1 / (1 + exp(-eta)) ; phi <- 10
yyy <- rbeta(n+n_test, mu * phi, (1 - mu) * phi)
yyy = pmin(pmax(yyy, epsilon), 1 - epsilon)
X = xxx[1:n,]
y = yyy[1:n]
y_test = yyy[-(1:n)]
X_test = xxx[-(1:n),]
df <- data.frame(y, X)
# Fit the Beta regression model
library(betareg)
fit_betareg <- betareg(y ~ 0+ X, data = df)
bereg <- fit_betareg$coefficients$mean  ; pred_betreg <- predict(fit_betareg); pred_breg_test <- 1/(1 + exp(-X_test %*% bereg))
bereg_out[[ss]] = c(mean( (beta_true - bereg)^2 ), mean( (X %*%beta_true - X %*%bereg)^2 ), mean( (pred_betreg - y)^2 ), mean( (pred_breg_test - y_test)^2 ) )
# Logit-transform y (avoid 0/1)
y_logit <- log((y + epsilon) / (1 - y + epsilon))
fit <- cv.glmnet(X, y_logit, alpha = 1,intercept= FALSE)  # Lasso
lasso <- as.vector( coef(fit, s = "lambda.min"))[-1]
y_pred <- 1 / (1 + exp(-predict(fit,newx = X))) ; y_tes_hat <-  1 / (1 + exp(-predict(fit,newx = X_test)))
lassoout[[ss]] = c(mean( (beta_true - lasso)^2 ), mean( (X %*%beta_true - X %*%lasso)^2 ), mean( (y_pred - y)^2 ), mean( (y_tes_hat - y_test)^2 ) )
# --- Posterior Summaries ---
beta_samples <- gibbs_sampler_betreg_HS(y,X,phi = 10,n_iter = 1200)
posterior <- beta_samples[(200 + 1):1200, ]
posterior_means <- colMeans(posterior)
mu_HS <- 1 / (1 + exp(-X %*% posterior_means)); mu_HS_test <- 1 / (1 + exp(-X_test %*% posterior_means))
hs_out[[ss]] = c(mean( (beta_true - posterior_means)^2 ), mean( (X %*%beta_true - X %*%posterior_means)^2 ), mean( (mu_HS - y)^2 ), mean( (mu_HS_test - y_test)^2 ) )
print(ss)
}
save.image(file = 'beta_n500p20s10_rX_.rda')
library(usethis)
setwd("C:/Users/thmai/OneDrive - Folkehelseinstituttet/Tien Mt/sparse Beta regr")
create_package('betaregbayes')
setwd("C:/Users/thmai/OneDrive - Folkehelseinstituttet/Tien Mt/sparse Beta regr/betaregbayes")
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::install()
library(tobitbayes)
library(betaregbayes)
detach("package:betareg", unload = TRUE)
library(betaregbayes)
devtools::check()
devtools::document()
devtools::build()
devtools::install()
library(betaregbayes)
devtools::document()
devtools::build()
devtools::install()
library(betaregbayes)
devtools::document()
devtools::build()
devtools::install()
library(betaregbayes)
devtools::check()
n <- 100
p <- 10
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(2, -1.5, rep(0, p - 2))
eta <- X %*% beta_true
mu <- 1 / (1 + exp(-eta))
phi <- 10
y <- rbeta(n, mu * phi, (1 - mu) * phi)
res <- gibbs_sampler_betreg_HS(y, X, phi = 10, n_iter = 1000, burn_in = 200)
str(res)
res
p <- 5
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(2, -1.5, rep(0, p - 2))
eta <- X %*% beta_true
mu <- 1 / (1 + exp(-eta))
phi <- 10
y <- rbeta(n, mu * phi, (1 - mu) * phi)
res <- gibbs_sampler_betreg_HS(y, X, phi = 10, n_iter = 1000, burn_in = 200)
str(res)
library(betaregbayes)
detach("package:betaregbayes", unload = TRUE)
remove.packages("betaregbayes")
devtools::document()
devtools::build()
devtools::install()
library(betaregbayes)
devtools::check()
library(betaregbayes)
set.seed(42)
n <- 100
p <- 5
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(2, -1.5, rep(0, p - 2))
eta <- X %*% beta_true
mu <- 1 / (1 + exp(-eta))
phi <- 10
y <- rbeta(n, mu * phi, (1 - mu) * phi)
res <- gibbs_sampler_betreg_HS(y, X, phi = 10, n_iter = 1000, burn_in = 200)
str(res)
colMeans(res$beta_samples)
res$selected_variable
res$ci
n <- 80
p <- 5
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(2, -1.5, rep(0, p - 2))
eta <- X %*% beta_true
mu <- 1 / (1 + exp(-eta))
phi <- 10
y <- rbeta(n, mu * phi, (1 - mu) * phi)
res <- gibbs_sampler_betreg_HS(y, X, phi = 10, n_iter = 800, burn_in = 200)
estimate_HS <- colMeans(res$beta_samples)
mean( (estimate_HS - beta_true)^2 )
res$selected_variable
res$ci
usethis::use_mit_license(name = "The Tien Mai")
usethis::use_mit_license(name = "The_Tien_Mai")
usethis::use_mit_license()
devtools::document()
devtools::build()
devtools::install()
library(betaregbayes)
devtools::check()
devtools::check(cran = TRUE)
?gibbs_sampler_betreg_HS
devtools::document()
devtools::build()
devtools::install()
library(betaregbayes)
devtools::check(cran = TRUE)
?betareg_bayes
devtools::document()
devtools::build()
devtools::install()
library(betaregbayes)
?betareg_bayes
devtools::document()
devtools::build()
devtools::install()
library(betaregbayes)
set.seed(42)
n <- 100
p <- 5
X <- matrix(rnorm(n * p), n, p)
beta_true <- c(2, -1.5, rep(0, p - 2))
eta <- X %*% beta_true
mu <- 1 / (1 + exp(-eta))
phi <- 10
y <- rbeta(n, mu * phi, (1 - mu) * phi)
res <- betareg_bayes(y, X, phi = 10, n_iter = 800, burn_in = 200)
estimate_HS <- colMeans(res$beta_samples)
mean( (estimate_HS - beta_true)^2 )
res$selected_variable
res$ci
devtools::document()
devtools::build()
devtools::install()
library(betaregbayes)
devtools::check(cran = TRUE)
library(betaregbayes)
devtools::document()
devtools::build()
devtools::install()
library(betaregbayes)
devtools::check(cran = TRUE)
library(betaregbayes)
?betareg_bayes
devtools::document()
devtools::build()
devtools::install()
library(betaregbayes)
?betareg_bayes
devtools::document()
pkgload::dev_help('betareg_bayes')
devtools::document()
pkgload::dev_help('betareg_bayes')
devtools::document()
pkgload::dev_help('betareg_bayes')
devtools::install()
library(betaregbayes)
devtools::check(cran = TRUE)
